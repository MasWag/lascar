#!/bin/bash

configure_options="$*"
prefix='/usr/local/lascar'
native='yes'
debug=''
dotviewer='graphviz'

ocamlversion_min=4.03

# Parse command-line arguments

while : ; do
  case "$1" in
    "") break;;
    -prefix|--prefix)
        prefix=$2; shift;;
    -byte-only|--byte-only)
        native='no'; shift;;
    -debug|--debug)
        debug='-g'; shift; continue;;
    -dotviewer|--dotviewer)
        dotviewer=$2; shift;;
    -help|--help)
        cat <<EOF
Usage: configure [options]
Options: [defaults in brackets after descriptions]
  --prefix PREFIX         install distribution in PREFIX [default: /usr/local/lascar]
  --byte-only             do not build native code executable
  --debug                 compile in debug mode [default: no]
  --dotviewer NAME        command name for displaying .dot files [default: open -a Graphviz]
  --help                  print this message
EOF
	exit 0;;
    *) echo "Unknown option \"$1\"." 1>&2; exit 2;;
  esac
  shift
done

# Sanity checks

case "$prefix" in
  ".") ;;
  /*) ;;
   *) echo "The -prefix directory must be absolute." 1>&2; exit 2;;
esac

version=`cat VERSION`
installdir=$prefix/lascar-$version
libdir=$installdir/lib
docdir=$installdir/doc
exampledir=$installdir/examples

# Generate the config file

rootdir=`dirname $0`

cd $rootdir
rm -f config
touch config

# Write options

echo "# generated by ./configure $configure_options" >> config
echo "" >> config
echo "VERSION=$version" >> config

# Where to install

echo "# Where to install" >> config
echo "INSTALLDIR=$installdir" >> config

# Check for install script
set dummy install; cmd_name=$2
/bin/echo -n "checking for $cmd_name... "
if sh ./etc/searchpath $cmd_name; then
    echo "$cmd_name"
else
    echo "not found"
    { echo "configure: error: cannot find $cmd_name." 1>&2; exit 1; }
fi
install=$cmd_name

echo >> config
echo "# Program used" >> config

# checking for ocamlc
set dummy ocamlc; pgm_name=$2
/bin/echo -n "checking for $pgm_name... "
if sh ./etc/searchpath $pgm_name; then
    echo "$pgm_name"
    pgm=$pgm_name
else
    echo "not found"
    { echo "configure: error: cannot find $pgm_name." 1>&2; exit 1; }
fi
ocamlc=$pgm


# checking for ocamlopt
set dummy ocamlopt; pgm_name=$2
/bin/echo -n "checking for $pgm_name... "
if sh ./etc/searchpath $pgm_name; then
    echo "$pgm_name"
    pgm=$pgm_name
else
    echo "not found"
fi
ocamlopt=$pgm

# checking for ocamdep
set dummy ocamldep; pgm_name=$2
/bin/echo -n "checking for $pgm_name... "
if sh ./etc/searchpath $pgm_name; then
    echo "$pgm_name"
    pgm=$pgm_name
else
    echo "not found"
fi
ocamldep=$pgm

# checking for ocamdoc
set dummy ocamldoc; pgm_name=$2
/bin/echo -n "checking for $pgm_name... "
if sh ./etc/searchpath $pgm_name; then
    echo "$pgm_name"
    pgm=$pgm_name
else
    echo "not found"
fi
ocamldoc=$pgm

ocamlbest=byte
if [ -n "$ocamlopt" ]; then
  ocamlbest=opt
fi
if [ -z "$target" ]; then
  target=$ocamlbest
fi

# Extract Ocaml version number and library path
# (borrowed from JC Filliatre)
ocamlversion=`$ocamlc -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
echo "ocaml version is $ocamlversion"
bad_version=`expr "$ocamlversion" \< "$ocamlversion_min"`
if test "$bad_version" = "1"; then
    { echo "configure: error: Ocaml >= $ocamlversion_min needed." 1>&2; exit 1; }
fi

ocamllib=`$ocamlc -where`
echo "ocaml library path is $ocamllib"


# checking for dot viewer 
set dummy $dotviewer; pgm_name=$2
/bin/echo -n "checking for program to view .dot files... "
if command -v "$pgm_name" >/dev/null 2>&1; then
   echo "$pgm_name"
   dotviewer=$pgm_name
else
   echo "not found"
   { echo "** configure: warning: cannot find $pgm_name." 1>&2; }
   dotviewer=''
fi

# Finish generated files

echo "INSTALL=$install" >> config
echo "CAMLC=$ocamlc" >> config
echo "CAMLOPT=$ocamlopt" >> config
echo "CAMLDEP=$ocamldep" >> config
echo "CAMLDOC=$ocamldoc" >> config
if [ -n "$dotviewer" ]; then
echo "DOTVIEWER=$dotviewer" >> config
fi
echo "CAMLCFLAGS=$debug" >> config
echo "CAMLOPTFLAGS=$debug" >> config
echo "LINKFLAGS=$debug" >> config
touch ./config-stamp

echo >> config
echo "BUILD_NATIVE=$native" >> config
echo "" >> config

echo
echo "** Configuration summary **"
echo
echo "Directory where the distribution will be installed:"
echo "        library.................   $libdir"
echo "        documentation............. $docdir"
if [ -n "$dotviewer" ]; then
echo "Program for viewing .dot files: \"$dotviewer\""
fi
echo
echo "** Configuration completed successfully **"
echo "** Wrote files ./config"
echo
